import * as vscode from "vscode";
import { TaskManager } from "./managers/taskManager";
import { InstructionManager } from "./managers/instructionManager";
import { TaskTreeProvider } from "./views/taskTreeProvider";
import { QueueTreeProvider } from "./views/queueTreeProvider";
import { CompletedTasksTreeProvider } from "./views/completedTasksTreeProvider";
import { InstructionTreeProvider } from "./views/instructionTreeProvider";
import { TaskEditorPanel } from "./views/taskEditorPanel";
import { CopilotIntegration } from "./integrations/copilotIntegration";
import { Task, Priority, TaskStatus, ProgressStats } from "./models/task";
import { Instruction } from "./models/instruction";
import { ApiTaskImporter } from "./services/apiTaskImporter";

/**
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function activate(context: vscode.ExtensionContext) {
  try {
    console.log("TaskFlow —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
    const taskManager = new TaskManager(context);
    taskManager.initialize();
    console.log("TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const instructionManager = new InstructionManager(context);
    instructionManager.initialize();
    console.log("InstructionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ TreeView –¥–ª—è –∑–∞–¥–∞—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Drag & Drop
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ TaskTreeProvider...");
    const taskTreeProvider = new TaskTreeProvider(taskManager);
    const tasksView = vscode.window.createTreeView("taskflow.tasksView", {
      treeDataProvider: taskTreeProvider,
      showCollapseAll: true,
      canSelectMany: false,
      dragAndDropController: taskTreeProvider,
    });
    console.log("TaskTreeProvider —Å–æ–∑–¥–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ TreeView –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Drag & Drop
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ QueueTreeProvider...");
    const queueTreeProvider = new QueueTreeProvider(taskManager);
    const queueView = vscode.window.createTreeView("taskflow.queueView", {
      treeDataProvider: queueTreeProvider,
      showCollapseAll: true,
      canSelectMany: false,
      dragAndDropController: queueTreeProvider,
    });
    console.log("QueueTreeProvider —Å–æ–∑–¥–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ TreeView –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ CompletedTasksTreeProvider...");
    const completedTasksTreeProvider = new CompletedTasksTreeProvider(
      taskManager
    );
    const completedTasksView = vscode.window.createTreeView(
      "taskflow.completedTasksView",
      {
        treeDataProvider: completedTasksTreeProvider,
        showCollapseAll: true,
        canSelectMany: false,
      }
    );
    console.log("CompletedTasksTreeProvider —Å–æ–∑–¥–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ TreeView –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ InstructionTreeProvider...");
    const instructionTreeProvider = new InstructionTreeProvider(
      instructionManager
    );
    const instructionsView = vscode.window.createTreeView(
      "taskflow.instructionsView",
      {
        treeDataProvider: instructionTreeProvider,
        showCollapseAll: false,
        canSelectMany: false,
      }
    );
    console.log("InstructionTreeProvider —Å–æ–∑–¥–∞–Ω");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Copilot
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ CopilotIntegration...");
    const copilotIntegration = new CopilotIntegration(
      context,
      instructionManager
    );
    console.log("CopilotIntegration —Å–æ–∑–¥–∞–Ω");

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...");
    registerCommands(
      context,
      taskManager,
      instructionManager,
      taskTreeProvider,
      copilotIntegration
    );
    console.log("–ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ subscriptions...");
    context.subscriptions.push(
      tasksView,
      queueView,
      completedTasksView,
      instructionsView,
      taskManager,
      instructionManager
    );

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    showWelcomeMessage(context);

    console.log("TaskFlow —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!");
  } catch (error) {
    console.error("–û–®–ò–ë–ö–ê –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TaskFlow:", error);
    vscode.window.showErrorMessage(
      `–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TaskFlow: ${
        error instanceof Error ? error.message : String(error)
      }`
    );
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function registerCommands(
  context: vscode.ExtensionContext,
  taskManager: TaskManager,
  instructionManager: InstructionManager,
  taskTreeProvider: TaskTreeProvider,
  copilotIntegration: CopilotIntegration
) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.initializeTasks", async () => {
      await taskManager.initializeTasksFile();
    })
  );

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.addTask", async () => {
      await showAddTaskDialog(
        taskManager,
        instructionManager,
        copilotIntegration
      );
    })
  );

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.editTask", async (item) => {
      if (item && item.task) {
        TaskEditorPanel.createOrShow(
          context.extensionUri,
          taskManager,
          instructionManager,
          item.task
        );
      }
    })
  );

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.deleteTask", async (item) => {
      if (item && item.task) {
        const result = await vscode.window.showWarningMessage(
          `–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${item.task.title}"?`,
          { modal: true },
          "–£–¥–∞–ª–∏—Ç—å"
        );

        if (result === "–£–¥–∞–ª–∏—Ç—å") {
          await taskManager.deleteTask(item.task.id);
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –Ω–µ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ
        }
      }
    })
  );

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.toggleTask", async (item) => {
      if (item && item.task) {
        await taskManager.toggleTask(item.task.id);
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–Ω –≤ UI
      }
    })
  );

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å Copilot
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.generateCodeWithCopilot",
      async (item) => {
        if (item && item.task) {
          await copilotIntegration.generateCodeForTask(item.task);
        } else {
          vscode.window.showWarningMessage(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"
          );
        }
      }
    )
  );

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.refreshTasks", () => {
      taskTreeProvider.refresh();
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–Ω–æ —Å—Ä–∞–∑—É –≤ UI
    })
  );

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.filterByPriority", async () => {
      const priority = await vscode.window.showQuickPick(
        [
          { label: "–í—Å–µ", value: null },
          { label: "üî¥ –í—ã—Å–æ–∫–∏–π", value: Priority.High },
          { label: "üü° –°—Ä–µ–¥–Ω–∏–π", value: Priority.Medium },
          { label: "üü¢ –ù–∏–∑–∫–∏–π", value: Priority.Low },
        ],
        { placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏" }
      );

      if (priority) {
        taskTreeProvider.setFilterPriority(priority.value);
      }
    })
  );

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.filterByStatus", async () => {
      const status = await vscode.window.showQuickPick(
        [
          { label: "–í—Å–µ", value: null },
          { label: "‚è≥ –û–∂–∏–¥–∞–µ—Ç", value: TaskStatus.Pending },
          { label: "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", value: TaskStatus.InProgress },
          { label: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", value: TaskStatus.Completed },
        ],
        { placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏" }
      );

      if (status) {
        taskTreeProvider.setFilterStatus(status.value);
      }
    })
  );

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.showProgress", () => {
      const stats = taskManager.calculateProgress();
      const message = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.completed}/${stats.total} –∑–∞–¥–∞—á (${stats.percentage}%)`;
      vscode.window.showInformationMessage(message);
    })
  );

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.addToQueue", async (item) => {
      if (item && item.task) {
        try {
          await taskManager.addToQueue(item.task.id);
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏
        } catch (error) {
          vscode.window.showErrorMessage(
            error instanceof Error ? error.message : String(error)
          );
        }
      }
    })
  );

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.removeFromQueue",
      async (item) => {
        if (item && item.task) {
          try {
            await taskManager.removeFromQueue(item.task.id);
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –∑–∞–¥–∞—á–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          } catch (error) {
            vscode.window.showErrorMessage(
              error instanceof Error ? error.message : String(error)
            );
          }
        }
      }
    )
  );

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.moveInQueue", async (item) => {
      if (item && item.task && item.task.queuePosition) {
        const queuedTasks = taskManager.getQueuedTasks();
        const newPosition = await vscode.window.showInputBox({
          prompt: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (1-${queuedTasks.length})`,
          value: item.task.queuePosition.toString(),
          validateInput: (value) => {
            const num = parseInt(value);
            if (isNaN(num) || num < 1 || num > queuedTasks.length) {
              return `–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ ${queuedTasks.length}`;
            }
            return null;
          },
        });

        if (newPosition) {
          try {
            await taskManager.moveInQueue(item.task.id, parseInt(newPosition));
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∏–¥–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
          } catch (error) {
            vscode.window.showErrorMessage(
              error instanceof Error ? error.message : String(error)
            );
          }
        }
      }
    })
  );

  // –ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.startNextInQueue", async () => {
      try {
        const nextTask = await taskManager.startNextInQueue();
        if (nextTask) {
          const taskId = nextTask.id;

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - Copilot –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Copilot
          const shouldComplete = await copilotIntegration.generateCodeForTask(
            nextTask
          );

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
          if (shouldComplete) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
            const currentTask = taskManager.getTaskById(taskId);
            if (currentTask) {
              await taskManager.updateTask(taskId, {
                ...currentTask,
                status: TaskStatus.Completed,
              });
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–Ω –≤ UI
            }
          }
        }
      } catch (error) {
        vscode.window.showErrorMessage(
          error instanceof Error ? error.message : String(error)
        );
      }
    })
  );

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏ –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.completeAndStartNext",
      async (item) => {
        if (item && item.task) {
          try {
            const nextTask = await taskManager.completeAndStartNext(
              item.task.id
            );
            if (nextTask) {
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ Copilot

              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Copilot –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
              const shouldComplete =
                await copilotIntegration.generateCodeForTask(nextTask);

              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
              if (shouldComplete) {
                // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
                const currentTask = taskManager.getTaskById(nextTask.id);
                if (currentTask) {
                  await taskManager.updateTask(nextTask.id, {
                    ...currentTask,
                    status: TaskStatus.Completed,
                  });
                  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–Ω –≤ UI
                }
              }
            } else {
              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–¥–Ω–æ –≤ UI
            }
          } catch (error) {
            vscode.window.showErrorMessage(
              error instanceof Error ? error.message : String(error)
            );
          }
        }
      }
    )
  );

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Å Copilot (–∏–∑ –æ—á–µ—Ä–µ–¥–∏)
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.executeTaskWithCopilot",
      async (item) => {
        if (item && item.task) {
          try {
            const task = item.task;
            const taskId = task.id;

            // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Copilot
            const shouldComplete = await copilotIntegration.generateCodeForTask(
              task
            );

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            if (shouldComplete) {
              // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
              const currentTask = taskManager.getTaskById(taskId);
              if (currentTask) {
                await taskManager.updateTask(taskId, {
                  ...currentTask,
                  status: TaskStatus.Completed,
                });
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–¥–Ω–æ –≤ UI
              }
            }
          } catch (error) {
            vscode.window.showErrorMessage(
              error instanceof Error ? error.message : String(error)
            );
          }
        }
      }
    )
  );

  // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ API
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.importTasksFromApi", async () => {
      const apiTaskImporter = new ApiTaskImporter(taskManager);
      await apiTaskImporter.importTasksFromApi();
    })
  );

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.showQueue", async () => {
      const queuedTasks = taskManager.getQueuedTasks();

      if (queuedTasks.length === 0) {
        vscode.window.showInformationMessage("–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø—É—Å—Ç–∞");
        return;
      }

      const items = queuedTasks.map((task) => ({
        label: `${task.queuePosition}. ${task.title}`,
        description: `${task.priority} | ${task.status}`,
        task: task,
      }));

      const selected = await vscode.window.showQuickPick(items, {
        placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
      });

      if (selected) {
        await showTaskDetailsPanel(selected.task, taskManager);
      }
    })
  );

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.runQueueAutomatically",
      async () => {
        const queuedTasks = taskManager.getQueuedTasks();

        if (queuedTasks.length === 0) {
          vscode.window.showInformationMessage("–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø—É—Å—Ç–∞");
          return;
        }

        const result = await vscode.window.showInformationMessage(
          `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${queuedTasks.length} –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Copilot?`,
          { modal: true },
          "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        );

        if (result !== "–ó–∞–ø—É—Å—Ç–∏—Ç—å") {
          return;
        }

        vscode.window.showInformationMessage(
          `–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${queuedTasks.length} –∑–∞–¥–∞—á. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Copilot...`
        );

        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
        const totalTasks = queuedTasks.length; // –ó–∞–ø–æ–º–Ω–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        let completedCount = 0;
        let errorCount = 0;

        try {
          // –ü–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
          while (taskManager.getQueuedTasks().length > 0) {
            let taskId: string | undefined;
            let taskTitle: string | undefined;

            try {
              // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
              const task = await taskManager.startNextInQueue();
              if (!task) {
                break; // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
              }

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
              taskId = task.id;
              taskTitle = task.title;

              // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–Ω –≤ Copilot Chat

              // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              // autoComplete=false –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              const userConfirmed =
                await copilotIntegration.generateCodeForTask(task, false);

              // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –ø–æ ID –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
              const currentTask = taskManager.getTaskById(taskId);
              if (!currentTask) {
                throw new Error(
                  `–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏`
                );
              }

              if (userConfirmed) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                await taskManager.updateTask(taskId, {
                  ...currentTask,
                  status: TaskStatus.Completed,
                });

                // –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                await taskManager.removeFromQueue(taskId);

                completedCount++;

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–Ω –≤ UI
              } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞—á—É
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª persistent notification

                // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –ù–ï –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ completed
                await taskManager.removeFromQueue(taskId);

                errorCount++;
              }

              // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
              await new Promise((resolve) => setTimeout(resolve, 1000));
            } catch (taskError) {
              errorCount++;
              const errorMsg = taskTitle
                ? `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ "${taskTitle}": ${
                    taskError instanceof Error
                      ? taskError.message
                      : String(taskError)
                  }`
                : `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${
                    taskError instanceof Error
                      ? taskError.message
                      : String(taskError)
                  }`;
              vscode.window.showErrorMessage(errorMsg);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
              continue;
            }
          }

          // –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (errorCount === 0) {
            vscode.window.showInformationMessage(
              `üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${completedCount}/${totalTasks}`
            );
          } else {
            vscode.window.showWarningMessage(
              `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`
            );
          }
        } catch (error) {
          vscode.window.showErrorMessage(
            `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          );
        }
      }
    )
  );

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.showTaskDetails",
      async (task: Task) => {
        TaskEditorPanel.createOrShow(
          context.extensionUri,
          taskManager,
          instructionManager,
          task
        );
      }
    )
  );

  // === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ ===

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  context.subscriptions.push(
    vscode.commands.registerCommand("taskflow.createInstruction", async () => {
      const name = await vscode.window.showInputBox({
        prompt: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        placeHolder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ REST API",
        validateInput: (value) => {
          if (!value || value.trim().length === 0) {
            return "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
          }
          return null;
        },
      });

      if (!name) {
        return;
      }

      const description = await vscode.window.showInputBox({
        prompt: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        placeHolder: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –¥–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
      });

      const content = await vscode.window.showInputBox({
        prompt: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Copilot",
        placeHolder: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º...",
        validateInput: (value) => {
          if (!value || value.trim().length === 0) {
            return "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π";
          }
          return null;
        },
      });

      if (!content) {
        return;
      }

      try {
        const instruction = await instructionManager.createInstruction(
          name,
          content,
          description
        );
        vscode.window.showInformationMessage(
          `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "${instruction.name}" —Å–æ–∑–¥–∞–Ω–∞`
        );
      } catch (error) {
        vscode.window.showErrorMessage(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${
            error instanceof Error ? error.message : String(error)
          }`
        );
      }
    })
  );

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.viewInstruction",
      async (instruction) => {
        if (!instruction) {
          return;
        }

        const instructionData = instruction.instruction || instruction;

        const panel = vscode.window.createWebviewPanel(
          "instructionView",
          instructionData.name,
          vscode.ViewColumn.One,
          { enableScripts: false }
        );

        panel.webview.html = getInstructionWebviewContent(instructionData);
      }
    )
  );

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.editInstruction",
      async (item) => {
        if (!item || !item.instruction) {
          return;
        }

        const instruction = item.instruction;

        if (instruction.isDefault) {
          vscode.window.showWarningMessage(
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          );
          return;
        }

        try {
          await instructionManager.openInstruction(instruction.id);
        } catch (error) {
          vscode.window.showErrorMessage(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          );
        }
      }
    )
  );

  // –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.deleteInstruction",
      async (item) => {
        if (!item || !item.instruction) {
          return;
        }

        const instruction = item.instruction;

        if (instruction.isDefault) {
          vscode.window.showWarningMessage(
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å"
          );
          return;
        }

        const result = await vscode.window.showWarningMessage(
          `–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "${instruction.name}"?`,
          { modal: true },
          "–£–¥–∞–ª–∏—Ç—å"
        );

        if (result !== "–£–¥–∞–ª–∏—Ç—å") {
          return;
        }

        try {
          await instructionManager.deleteInstruction(instruction.id);
          vscode.window.showInformationMessage(
            `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "${instruction.name}" —É–¥–∞–ª–µ–Ω–∞`
          );
        } catch (error) {
          vscode.window.showErrorMessage(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          );
        }
      }
    )
  );

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–¥–∞—á–µ
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.assignInstructionToTask",
      async (item) => {
        if (!item || !item.task) {
          return;
        }

        const task = item.task;
        const instructions = instructionManager.getAllInstructions();

        const items = instructions.map((inst) => ({
          label: inst.name,
          description: inst.isDefault ? "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" : inst.description,
          instruction: inst,
          picked: task.instructionId === inst.id,
        }));

        const selected = await vscode.window.showQuickPick(items, {
          placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏",
        });

        if (!selected) {
          return;
        }

        try {
          const instructionId =
            selected.instruction.id === "default"
              ? undefined
              : selected.instruction.id;

          await taskManager.updateTask(task.id, {
            ...task,
            instructionId,
          });

          vscode.window.showInformationMessage(
            `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "${selected.instruction.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–µ "${task.title}"`
          );
        } catch (error) {
          vscode.window.showErrorMessage(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${
              error instanceof Error ? error.message : String(error)
            }`
          );
        }
      }
    )
  );

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  context.subscriptions.push(
    vscode.commands.registerCommand(
      "taskflow.refreshInstructions",
      async () => {
        await instructionManager.initialize();
      }
    )
  );
}

/**
 * –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
 */
async function showAddTaskDialog(
  taskManager: TaskManager,
  instructionManager: InstructionManager,
  copilotIntegration: CopilotIntegration
): Promise<void> {
  // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const titleInput = await vscode.window.showInputBox({
    prompt: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI)",
    placeHolder:
      "–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ /ai —Å–æ–∑–¥–∞—Ç—å REST API",
    validateInput: (value) => {
      return value.trim() ? null : "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
    },
  });

  if (!titleInput) {
    return;
  }

  let title = titleInput;
  let description: string | undefined;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞
  if (titleInput.trim().startsWith("/ai")) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /ai
    const briefTitle = titleInput.trim().substring(3).trim();

    if (!briefTitle) {
      vscode.window.showWarningMessage(
        "–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /ai"
      );
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º CopilotIntegration –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const aiGenerated = await copilotIntegration.generateTaskDescription(
      briefTitle
    );

    if (aiGenerated) {
      title = aiGenerated.title;
      description = aiGenerated.description;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
      const confirm = await vscode.window.showInformationMessage(
        `ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${title}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏?`,
        { modal: true },
        "‚úÖ –î–∞",
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "‚ùå –û—Ç–º–µ–Ω–∞"
      );

      if (confirm === "‚ùå –û—Ç–º–µ–Ω–∞" || !confirm) {
        return;
      }

      if (confirm === "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å") {
        // –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        const editedTitle = await vscode.window.showInputBox({
          prompt: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
          value: title,
          validateInput: (value) => {
            return value.trim() ? null : "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
          },
        });

        if (!editedTitle) {
          return;
        }
        title = editedTitle;

        const editedDescription = await vscode.window.showInputBox({
          prompt: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
          value: description,
        });

        description = editedDescription || description;
      }
    } else {
      // AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      return;
    }
  } else {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = await vscode.window.showInputBox({
      prompt: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
      placeHolder: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    });
  }

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  const categories = taskManager.getCategories();
  const categoryItems = [
    { label: "$(add) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", value: "__new__" },
    ...categories.map((cat) => ({ label: cat, value: cat })),
  ];

  const selectedCategory = await vscode.window.showQuickPick(categoryItems, {
    placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
  });

  let category: string | undefined;
  if (selectedCategory) {
    if (selectedCategory.value === "__new__") {
      category = await vscode.window.showInputBox({
        prompt: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        placeHolder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ë—ç–∫–µ–Ω–¥",
      });
    } else {
      category = selectedCategory.value;
    }
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  const priorityItem = await vscode.window.showQuickPick(
    [
      { label: "üî¥ –í—ã—Å–æ–∫–∏–π", value: Priority.High },
      { label: "üü° –°—Ä–µ–¥–Ω–∏–π", value: Priority.Medium },
      { label: "üü¢ –ù–∏–∑–∫–∏–π", value: Priority.Low },
    ],
    { placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" }
  );

  const priority = priorityItem?.value || Priority.Medium;

  // –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const dueDateStr = await vscode.window.showInputBox({
    prompt: "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
    placeHolder: "–ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-12-31",
    validateInput: (value) => {
      if (!value) {
        return null;
      }
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      return dateRegex.test(value) ? null : "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î";
    },
  });

  const dueDate = dueDateStr ? new Date(dueDateStr) : undefined;

  // –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Copilot
  const instructions = instructionManager.getAllInstructions();
  const instructionItems = instructions.map((inst) => ({
    label: inst.name,
    description: inst.isDefault ? "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" : inst.description,
    value: inst.id,
  }));

  const selectedInstruction = await vscode.window.showQuickPick(
    instructionItems,
    {
      placeHolder:
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è Copilot (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)",
    }
  );

  const instructionId =
    selectedInstruction && selectedInstruction.value !== "default"
      ? selectedInstruction.value
      : undefined;

  // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const executionDurationStr = await vscode.window.showInputBox({
    prompt: "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
    placeHolder: "30 (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
    validateInput: (value) => {
      if (!value) {
        return null; // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ
      }
      const num = parseInt(value, 10);
      if (isNaN(num) || num < 1) {
        return "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ";
      }
      if (num > 480) {
        return "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 480 –º–∏–Ω—É—Ç (8 —á–∞—Å–æ–≤)";
      }
      return null;
    },
  });

  const executionDuration = executionDurationStr
    ? parseInt(executionDurationStr, 10)
    : undefined;

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  await taskManager.addTask({
    title,
    description,
    category,
    priority,
    dueDate,
    status: TaskStatus.Pending,
    instructionId,
    executionDuration,
  });

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
 */
async function showTaskDetailsPanel(
  task: Task,
  taskManager: TaskManager
): Promise<void> {
  const panel = vscode.window.createWebviewPanel(
    "taskDetails",
    `–ó–∞–¥–∞—á–∞: ${task.title}`,
    vscode.ViewColumn.One,
    {
      enableScripts: true,
    }
  );

  const progress = taskManager.calculateTaskProgress(task);

  panel.webview.html = getTaskDetailsHtml(task, progress);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø–∞–Ω–µ–ª–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
 */
function getTaskDetailsHtml(task: Task, progress: ProgressStats): string {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</title>
  <style>
    body {
      font-family: var(--vscode-font-family);
      padding: 20px;
      color: var(--vscode-foreground);
      background-color: var(--vscode-editor-background);
    }
    h1 {
      color: var(--vscode-editor-foreground);
      border-bottom: 1px solid var(--vscode-panel-border);
      padding-bottom: 10px;
    }
    .metadata {
      display: grid;
      grid-template-columns: 150px 1fr;
      gap: 10px;
      margin: 20px 0;
    }
    .label {
      font-weight: bold;
      color: var(--vscode-descriptionForeground);
    }
    .priority-high { color: #f14c4c; }
    .priority-medium { color: #cca700; }
    .priority-low { color: #89d185; }
    .status-completed { color: #89d185; }
    .status-pending { color: #cca700; }
    .status-inprogress { color: #3794ff; }
    .progress-bar {
      width: 100%;
      height: 20px;
      background-color: var(--vscode-progressBar-background);
      border-radius: 10px;
      overflow: hidden;
      margin: 10px 0;
    }
    .progress-fill {
      height: 100%;
      background-color: var(--vscode-progressBar-background);
      transition: width 0.3s;
    }
    .subtasks {
      margin-top: 20px;
    }
    .subtask {
      padding: 5px 0;
    }
    .description {
      margin-top: 20px;
      padding: 15px;
      background-color: var(--vscode-textBlockQuote-background);
      border-left: 4px solid var(--vscode-textBlockQuote-border);
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <h1>${task.title}</h1>
  
  <div class="metadata">
    <span class="label">–°—Ç–∞—Ç—É—Å:</span>
    <span class="status-${task.status}">${task.status}</span>
    
    <span class="label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
    <span class="priority-${task.priority.toLowerCase()}">${
    task.priority
  }</span>
    
    ${
      task.category
        ? `
      <span class="label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
      <span>${task.category}</span>
    `
        : ""
    }
    
    ${
      task.dueDate
        ? `
      <span class="label">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</span>
      <span>${task.dueDate.toLocaleDateString("ru-RU")}</span>
    `
        : ""
    }
    
    ${
      task.assignee
        ? `
      <span class="label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>
      <span>@${task.assignee}</span>
    `
        : ""
    }
    
    <span class="label">–°–æ–∑–¥–∞–Ω–∞:</span>
    <span>${task.createdAt.toLocaleString("ru-RU")}</span>
    
    <span class="label">–û–±–Ω–æ–≤–ª–µ–Ω–∞:</span>
    <span>${task.updatedAt.toLocaleString("ru-RU")}</span>
  </div>
  
  ${
    task.subtasks && task.subtasks.length > 0
      ? `
    <div class="subtasks">
      <h2>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.percentage}%</h2>
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${progress.percentage}%"></div>
      </div>
      <p>${progress.completed} –∏–∑ ${progress.total} –ø–æ–¥–∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
      
      <h3>–ü–æ–¥–∑–∞–¥–∞—á–∏:</h3>
      ${task.subtasks
        .map(
          (st) => `
        <div class="subtask">
          ${st.completed ? "‚úÖ" : "‚¨ú"} ${st.title}
        </div>
      `
        )
        .join("")}
    </div>
  `
      : ""
  }
  
  ${
    task.result
      ? `
    <div class="description" style="border-left-color: #89d185;">
      <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h3>
      ${task.result}
    </div>
  `
      : ""
  }
  
  ${
    task.description
      ? `
    <div class="description">
      <h3>–û–ø–∏—Å–∞–Ω–∏–µ:</h3>
      ${task.description}
    </div>
  `
      : ""
  }
</body>
</html>
  `;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function showWelcomeMessage(context: vscode.ExtensionContext): void {
  const hasShownWelcome = context.globalState.get<boolean>(
    "taskflow.hasShownWelcome"
  );

  if (!hasShownWelcome) {
    vscode.window
      .showInformationMessage(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskFlow! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∑–∞–¥–∞—á",
        "–ü–æ–∑–∂–µ"
      )
      .then((selection) => {
        if (selection === "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∑–∞–¥–∞—á") {
          vscode.commands.executeCommand("taskflow.initializeTasks");
        }
      });

    context.globalState.update("taskflow.hasShownWelcome", true);
  }
}

/**
 * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è webview –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
 */
function getInstructionWebviewContent(instruction: Instruction): string {
  return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${instruction.name}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            padding: 20px;
            line-height: 1.6;
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
        }
        h1 {
            color: var(--vscode-editor-foreground);
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 10px;
        }
        .description {
            color: var(--vscode-descriptionForeground);
            font-style: italic;
            margin-bottom: 20px;
        }
        .content {
            background-color: var(--vscode-textCodeBlock-background);
            padding: 15px;
            border-radius: 5px;
            border: 1px solid var(--vscode-panel-border);
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .metadata {
            margin-top: 20px;
            font-size: 0.9em;
            color: var(--vscode-descriptionForeground);
        }
        .badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            background-color: var(--vscode-badge-background);
            color: var(--vscode-badge-foreground);
            font-size: 0.85em;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <h1>${instruction.name}</h1>
    ${
      instruction.description
        ? `<p class="description">${instruction.description}</p>`
        : ""
    }
    ${instruction.isDefault ? '<span class="badge">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</span>' : ""}
    <div class="content">${instruction.content}</div>
    <div class="metadata">
        <p>ID: <code>${instruction.id}</code></p>
        ${
          instruction.createdAt
            ? `<p>–°–æ–∑–¥–∞–Ω–æ: ${new Date(instruction.createdAt).toLocaleString(
                "ru-RU"
              )}</p>`
            : ""
        }
        ${
          instruction.updatedAt
            ? `<p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(instruction.updatedAt).toLocaleString(
                "ru-RU"
              )}</p>`
            : ""
        }
    </div>
</body>
</html>`;
}

export function deactivate() {
  console.log("TaskFlow —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ");
}
